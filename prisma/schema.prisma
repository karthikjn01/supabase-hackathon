// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_DIRECT_URL")
}

model Profiles {
  id          String   @id @default(cuid())
  displayName String?  @map("display_name")
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  Votes       Votes[]
}

model Questions {
  id        String     @id @default(cuid())
  question  String
  views     Int        @default(0) // maybe to be implemented not sure yet.
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  Answers   Answers[] //two
  Comments  Comments[]
  Votes     Votes[]
}

model Answers {
  id         String     @id @default(cuid())
  answer     String
  questionId String
  question   Questions  @relation(fields: [questionId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  Votes      Votes[]
  Comments   Comments[]
}

model Votes {
  id         String    @id @default(cuid())
  userId     String
  user       Profiles  @relation(fields: [userId], references: [id])
  questionId String
  question   Questions @relation(fields: [questionId], references: [id])
  answerId   String
  answer     Answers   @relation(fields: [answerId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Comments {
  id         String    @id @default(cuid())
  comment    String
  answerId   String
  answer     Answers   @relation(fields: [answerId], references: [id])
  questionId String
  question   Questions @relation(fields: [questionId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

// maybe add likes for comments later.
